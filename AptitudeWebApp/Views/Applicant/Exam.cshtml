@* <h3>Login</h3>
 *@
 @using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor Accessor
 @model Exam
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>Exam Page</title>
    <link rel="stylesheet" href="~/css/exam.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Get the start time from the server
            var startTime = new Date('@Model.StartTime.Value.ToString("yyyy-MM-ddTHH:mm:ss")');

            // Set the total time allowed in seconds
            var totalTimeAllowed = @Model.TotalTimeAllowedInSeconds;

            // Get the timer element
            var timerElement = document.getElementById("timer");

            // Update the timer every second
            var countdownInterval = setInterval(function () {
                // Calculate remaining time using client-side time
                var remainingTime = totalTimeAllowed - Math.floor((Date.now() - startTime) / 1000);

                // Check if time has expired
                if (remainingTime <= 0) {
                    clearInterval(countdownInterval);
                    timerElement.innerHTML = "Time Expired";
                    document.forms["examForm"].submit();
                } else {
                    // Format remaining time as MM:SS
                    var minutes = Math.floor(remainingTime / 60);
                    var seconds = remainingTime % 60;

                    // Update the timer element
                    timerElement.innerHTML = "Time Remaining: " + minutes.toString().padStart(2, '0') + ":" + seconds.toString().padStart(2, '0');
                }
            }, 1000); // Update every second
        });
    </script>
</head>
<body>
    <div class="container wrapper d-flex align-content-around flex-column">

        <div class="row d-flex justify-content-around">
            <h3 class="timer my-3" id="timer" style="text-align: center;">
                Time Remaining: @TimeRemaining(Model.StartTime.Value, Model.TotalTimeAllowedInSeconds)
            </h3>
            @if (Model.ExamTypeId == 1)
            {
                <div class="result">General Knowledge</div>
            }
            else if (Model.ExamTypeId == 2)
            {
                <div class="result">Mathematics</div>
            }
            else if (Model.ExamTypeId == 3)
            {
                <div class="result">Computer Technology</div>
            }
            else
            {
                <div class="result">General Knowledge</div>
            }
            <a asp-action="LogOut" asp-controller="Account" class="logout">LOGOUT</a>

        </div>

        <form asp-action="SubmitAnswer" name="examForm" asp-controller="Applicant" method="post" class="px-4">
            <div class="row">
                @for (var i = 0; i < Model.ExamQuestions.Count; i++)
                {
                    <div class="form-group my-3">
                        <h1>Question @(i+1) : @Model.ExamQuestions[i].QuestionText</h1>

                        @for (var j = 0; j < Model.ExamQuestions[i].Answers.Count; j++)
                        {
                            var answerId = $"answer-{i}-{j}";
                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="radio" id="@answerId" name="SelectedAnswers[@i]" value="@Model.ExamQuestions[i].Answers[j].Id">
                                <label class="form-check-label" for="@answerId">@Model.ExamQuestions[i].Answers[j].Text</label>
                            </div>
                        }
                    </div>
                }

            </div>
            <div class="row">
                <input type="hidden" name="examId" value="@Model.ExamId" class="btn-primary btn-sm" />
                <input type="hidden" name="examTypeId" value="@Model.ExamTypeId" class="btn-primary btn-sm" />
                <input type="hidden" name="applicantId" value="@Accessor.HttpContext.Session.GetString("ApplicantId")" class="btn-primary btn-sm" />
                @if (Model.ExamTypeId == 3)
                {
                    <button type="submit" style="float: right" class="btn btn-primary btn-lg my-4">Complete my test</button>

                }
                else
                {
                    <button type="submit" style="float: right" class="btn btn-primary btn-lg my-4">Submit</button>

                }

            </div>
        </form>

    </div>
</body>
</html>
@functions {
    bool IsTimeExpired(DateTime startTime, int totalTimeAllowedInSeconds)
    {
        var elapsedTime = DateTime.Now - startTime;
        return elapsedTime.TotalSeconds > totalTimeAllowedInSeconds;
    }
    string TimeRemaining(DateTime startTime, int totalTimeAllowedInSeconds)
    {
        if (IsTimeExpired(startTime, totalTimeAllowedInSeconds))
        {
            return "Time Expired";
        }

        var elapsedTime = DateTime.Now - startTime;
        var remainingTime = totalTimeAllowedInSeconds - (int)elapsedTime.TotalSeconds;

        var minutes = remainingTime / 60;
        var seconds = remainingTime % 60;

        return $"{minutes:D2}:{seconds:D2}";
    }
}